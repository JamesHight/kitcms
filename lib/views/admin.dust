<html>
	<head>		
		<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Droid+Sans|Droid+Sans:bold"/>		
		<link rel="stylesheet" href="/codemirror/lib/codemirror.css">
		<link rel="stylesheet" href="/font-awesome/css/font-awesome.css">
		<link rel="stylesheet" href="/css/admin.css">
		
		<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

	    <script src="/codemirror/lib/codemirror.js"></script>
	    <script src="/codemirror/mode/xml/xml.js"></script>
	    <script src="/codemirror/mode/javascript/javascript.js"></script>
	    <script src="/codemirror/mode/css/css.js"></script>
	    <script src="/codemirror/mode/htmlmixed/htmlmixed.js"></script>
	</head>
	<body>
		<div id="content">
			<div id="keys">
				<ul>
					{#keys}
					<li data-value="{.}">{.}</li>
					{/keys}
				</ul>
			</div>
			<div id="controls">
				<a href="#" id="new" title="New Document Key" class="active"><i class="icon-plus"></i></a>
				<a href="#" id="save" title="Save Changes"><i class="icon-save"></i></a>
				<a href="#" id="reload" title="Reload Document From Server"><i class="icon-refresh"></i></a>
				<a href="#" id="move" title="Rename Document"><i class="icon-file"></i></a>
				<a href="#" id="remove" title="Delete Document"><i class="icon-remove"></i></a>
				<a href="#" id="view" target="_blank" title="View Web Page"><i class="icon-external-link"></i></a>			
			</div>
			<div id="editor">				
				<textarea id="text"></textarea>
			</div>
		</div>

		<script>	
			$(function() {
				var cache = {}, // cache for documents loaded from server
					changed = false, // flag if current document has changed
					busy = false, // flag if we are currently loading, saving, or deleting
					current, // pointer to current document $(<li>)
					editor; // CodeMirror instance

				/**
				 * Add a new <li> to the key list in the correct alphabetical order
				 **/
				function addToList(newLi) {
					var key = newLi.attr('data-value').toString(),
						added = false;

					// Find out where the new key falls in the list alphabetically
					$('#keys li').each(function() {
						var li = $(this),
							value = li.attr('data-value').toString();
						if (value > key) {
							newLi.insertBefore(li);
							added = true;
							return false;
						}
					});

					// We didn't find a slot, so append it to the end
					if (!added)
						newLi.appendTo($('#keys ul'));
				}

				function onChange() {
					// Flag document as changed if we aren't in 
					// the process of loading a document and it 
					// hasn't already been flagged.
					if (current && !changed && !busy) {
						current.addClass('changed');
						changed = true;
						// Update control states
						$('#save').addClass('active');
						$('#reload').addClass('active');
					}
				}

				function newDoc() {
					// Disable action if it does marked as active or another process is happening
					if (!$('#new').hasClass('active') || busy)
						return;

					var key = prompt('New document key:'), // Get the name of the new document key
						newLi;

					if (key && key.length) {
						if (cache.hasOwnProperty(key)) 
							return alert('That key already exists.');

						newLi = $('<li>').attr('data-value', key).text(key);

						// Store current doc before creating new doc
						if (current) {
							cache[current.attr('data-value')] = editor.getValue();
							current.removeClass('selected');
						}

						// Add a new cache entry
						cache[key] = '';
						editor.setValue('');

						addToList(newLi);

						current = newLi;
						current.addClass('selected');

						// Update control states
						$('#save').addClass('active');
						$('#reload').removeClass('active');
						$('#move').addClass('active');
						$('#remove').addClass('active');
						if (key.substr(0, 1) == '/')
							$('#view').addClass('active').attr('href', key);
						else
							$('#view').removeClass('active').attr('href', '#');
					}
				}

				function save() {
					// Disable action if it does marked as active or another process is happening
					if (!$('#save').hasClass('active') || busy)
						return;

					var key = current.attr('data-value'),
						value = editor.getValue() || '';

					// Flag as saving
					busy = true;

					$.post('/admin/set', {key: key, value: value}, function() {
						current.removeClass('changed');
						changed = false;
						$('#save').removeClass('active');
						$('#reload').removeClass('active');
						busy = false;
					});
				}

				function reload() {
					// Disable action if it does marked as active or another process is happening
					if (!$('#reload').hasClass('active') || busy)
						return;

					if (!confirm("Reload document and lose changes?"))
						return;

					var key = current.attr('data-value');
					busy = true;

					$.getJSON('/admin/get', {key: key}, function(data) {
						cache[key] = data;
						editor.setValue(data);
						current.removeClass('changed');
						changed = false;
						$('#save').removeClass('active');
						$('#reload').removeClass('active');
						busy = false;
					});
				}

				function move() {
					if (!$('#move').hasClass('active') || busy)
						return;

					// Get the new name of the current document
					var key = prompt('Rename ' + current.attr('data-value') + ' to:'), 
						oldKey;

					if (key && key.length) {
						if (cache.hasOwnProperty(key)) 
							return alert('That key already exists.');

						busy = true;
						oldKey = current.attr('data-value').toString();

						// Remove old entry
						$.post('/admin/unset', {key: oldKey}, function() {
							cache[key] = cache[oldKey];
							delete cache[oldKey];
							current.remove();

							$.post('/admin/set', {key: key, value: cache[key]}, function() {
								current.attr('data-value', key);
								current.text(key);
								addToList(current);
								busy = false;
							});
						});	
					}

				}

				function remove() {
					if (!$('#remove').hasClass('active') || busy)
						return;

					if (!confirm('Delete ' + current.attr('data-value') + '?'))
						return;
					
					var key = current.attr('data-value');
					busy = true;

					$.post('/admin/unset', {key: key}, function() {
						current.remove();
						current = null;
						changed = false;
						$('#save').removeClass('active');
						$('#reload').removeClass('active');
						$('#move').removeClass('active');
						$('#remove').removeClass('active');
						$('#view').removeClass('active').attr('href', '#');
						editor.setValue('');
						busy = false;
					});					
				}

				function listClick(e) {
					// Disable if another process is happening
					if (busy)
						return;

					var target = $(e.target),
						value = $(e.target).attr('data-value');

					load($(e.target).attr('data-value'));
				}

				function load(key) {
					busy = true;
					if (current) {
						cache[current.attr('data-value')] = editor.getValue();
						current.removeClass('selected');
					}

					if (cache.hasOwnProperty(key)) {
						editor.setValue(cache[key]);
						busy = false;

					}
					else {
						$.getJSON('/admin/get', {key: key}, function(data) {
							cache[key] = data;
							editor.setValue(data);
							busy = false;
						});
					}

					current = $('#keys li[data-value="' + key + '"]');
					current.addClass('selected');
					changed = current.hasClass('changed');
					if(changed) {
						$('#save').addClass('active');
						$('#reload').addClass('active');
					}
					else {
						$('#save').removeClass('active');
						$('#reload').removeClass('active');
					}
					$('#move').addClass('active');
					$('#remove').addClass('active');
					if (key.substr(0, 1) == '/')
						$('#view').addClass('active').attr('href', key);
					else
						$('#view').removeClass('active').attr('href', '#');
				}

				// Initialize editor
				editor = CodeMirror.fromTextArea(document.getElementById("text"), {
									mode: "text/html", 
									tabMode: "indent",
									lineNumbers: true,
									autofocus: true,
									onChange: onChange,
									extraKeys: {
										"Ctrl-O": newDoc,
										"Ctrl-S": save,
										"Ctrl-O": open
									}
								});

				// Connect toolbar buttons
				$('#new').click(newDoc);
				$('#save').click(save);
				$('#reload').click(reload);
				$('#move').click(move);
				$('#remove').click(remove);	

				// Listen for clicks on list of keys
				$('#keys').on('click', 'li', listClick);
			});
		</script>
	</body>
</html>